
/*write as program to implement circular queue using array pointers.*/
#include<stdio.h>

#define SIZE 5//THIS VALUE REMAINS CONSTANT

//FUNCTION FOR ENQUEUEING AN ELEMENT IN THE CQUEUE
void En_Queue(int *arr, int data, int *front, int *rear);


//FUNCTION FOR DEQUEUEING AN ELEMENT FROM THE CQUEUE
int De_Queue(int *arr, int *front, int *rear);

//TO CHECK IF THE CQUEUE IS EMPTY
int isEmpty(int front);


//TO CHECK IF THE CQUEUE IS FULL
int isFull2(int front,int rear);



//MAIN FUNCTION
int main()
{

   int array[SIZE],Front,Rear,value,choice;

   Front=Rear=-1;//INITILIASE FRONT,REAR POINTERS

   do
   {
      clrscr();
      printf("\n\n\n\n\t\t 1. EN-QUEUE");
      printf("\n\n\n\t\t 2. DE-QUEUE");
      printf("\n\n\n\t\t 3. DE-QUEUE ENTIRE QUEUE");
      printf("\n\n\n\t\t 0. EXIT");

      printf("\n\n\n\t\t ENTER YOUR CHOICE: ");
      scanf("%d",&choice);

      switch(choice)
      {
      case 1:
		clrscr();
		value=isFull2(Front,Rear);// Checking queue overflow.

		if(value==1)
		{
		   printf("\n\n\n\n\t\t ENTER VALUE TO BE EN-QUEUED: ");
		   scanf("%d",&value);

 En_Queue(array,value,&Front,&Rear);//ENQUEUES AN ELEMENT IN THE CQUEUE
		}
		else
		{
		   printf("\n\n\n\n\t\t ERROR: QUEUE OVERFLOW.");
		   getch();
		}
		break;

      case 2:
		clrscr();
		value=isEmpty(Front);   // Checking queue underflow.

		if(value==1)
		{
value=De_Queue(array,&Front,&Rear);//DEQUEUES AN ELEMENT FROM THE CQUEUE
		   printf("\n\n\n\n\t\t DE-QUEUED VALUE = %d",value);
		}
		else

		   printf("\n\n\n\n\t\t ERROR: QUEUE UNDERFLOW.");

		getch();

		break;

      case 3:
		clrscr();

		value=isEmpty(Front);   // Checking queue underflow.

		if(value==1)
		{
		   printf("\n\n\n\n\t QUEUE ELEMENTS:");

		   while(Front>-1)
		   {
		      value=De_Queue(array,&Front,&Rear);//function call
		      printf("\n\n\t\t %d",value);
		   }
		}
		else
		   printf("\n\n\n\n\t\t ERROR: QUEUE UNDERFLOW.");
		getch();
		break;
      case 0:
		exit(0);

      default:
		clrscr();

		printf("\n\n\n\n\t\t INVALID CHOICE.");

		getch();
      }

   }while(choice!=0);

   return(0);
}


/* Function to en-queue an element on queue.*/
void En_Queue(int *arr, int data, int *front, int *rear)
{
      if(*rear==SIZE-1)    // If rear pointer is at last location.
	 *rear=0;          // Set rear to first location.

      else                 // Otherwise...
	 (*rear)++;        // Incrementing rear pointer.

      arr[*rear]=data;     // En_queueing element in the queue.

      if(*front==-1)       // If queue is empty.
	 *front=0;         // Set front pointer to first location.
}



/* Function to de-queue an element from queue.*/
int De_Queue(int *arr, int *front, int *rear)
{

   int data=arr[*front];   // De_queueing element from the queue.

   if(*front==*rear)       // If front and rear pointer are at same location.
      *front=*rear=-1;     // Set front and rear pointer to -1.

   else if(*front==SIZE-1) // Otherwise....
      *front=0;

   else
      (*front)++;          // Increment front pointer.

   return(data);           // Returning de-queued element.
}


/* Function to check whether queue is empty or not .*/
int isEmpty(int front)
{
   if(front==-1)
      return(0);
   else
      return(1);
}

/* Function to check whether queue is full or not.*/
int isFull2(int front,int rear)
{
   if((front==0 && rear==SIZE-1) || (front==rear+1))//condition to check whether queue is full or not.
      return(0);
   else
      return(1);
}


/*output of the program*/
1. EN-QUEUE
 2. DE-QUEUE
3. DE-QUEUE ENTIRE QUEUE
 0. EXIT
enter yourt choice
1
eneter value to be enqueued
15

1. EN-QUEUE
 2. DE-QUEUE
3. DE-QUEUE ENTIRE QUEUE
 0. EXIT
enter yourt choice
2
DE-QUEUED VALUE IS
45

1. EN-QUEUE
 2. DE-QUEUE
3. DE-QUEUE ENTIRE QUEUE
 0. EXIT
enter yourt choice
0